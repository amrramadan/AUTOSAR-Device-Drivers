
SW_Layered_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000d1a  00000dae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800064  00800064  00000db2  2**0
                  ALLOC
  3 .stab         00001f14  00000000  00000000  00000db4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013f1  00000000  00000000  00002cc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 5e 03 	jmp	0x6bc	; 0x6bc <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e1       	ldi	r30, 0x1A	; 26
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 37       	cpi	r26, 0x73	; 115
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 80 06 	call	0xd00	; 0xd00 <main>
  8a:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Init_Task>:
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	af e5       	ldi	r26, 0x5F	; 95
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	ef e5       	ldi	r30, 0x5F	; 95
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 68       	ori	r24, 0x80	; 128
  a6:	8c 93       	st	X, r24
  a8:	80 e6       	ldi	r24, 0x60	; 96
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <Dio_Init>
  b0:	cf 91       	pop	r28
  b2:	df 91       	pop	r29
  b4:	08 95       	ret

000000b6 <Button_Task>:

}

/* Task called every 20 Mili-seconds to check the button state */
void Button_Task(void)
{
  b6:	df 93       	push	r29
  b8:	cf 93       	push	r28
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
	BUTTON_refreshState();
  be:	0e 94 8f 00 	call	0x11e	; 0x11e <BUTTON_refreshState>
}
  c2:	cf 91       	pop	r28
  c4:	df 91       	pop	r29
  c6:	08 95       	ret

000000c8 <Led_Task>:

/* Task called every 40 Mili-seconds to refresh the LED */
void Led_Task(void)
{
  c8:	df 93       	push	r29
  ca:	cf 93       	push	r28
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	LED_refreshOutput();
  d0:	0e 94 a7 03 	call	0x74e	; 0x74e <LED_refreshOutput>
}
  d4:	cf 91       	pop	r28
  d6:	df 91       	pop	r29
  d8:	08 95       	ret

000000da <App_Task>:

/* Task called every 60 Mili-seconds to get the button status and toggle the led */
void App_Task(void)
{
  da:	df 93       	push	r29
  dc:	cf 93       	push	r28
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
	static uint8 button_previous_state = BUTTON_RELEASED;
	static uint8 button_current_state  = BUTTON_RELEASED;
	
	button_current_state = BUTTON_getState(); //Read the button state
  e2:	0e 94 86 00 	call	0x10c	; 0x10c <BUTTON_getState>
  e6:	80 93 64 00 	sts	0x0064, r24
	
	/* Only Toggle the led in case the current state of the switch is pressed
	 * and the previous state is released */ 
	if((button_current_state == BUTTON_PRESSED) && (button_previous_state == BUTTON_RELEASED))
  ea:	80 91 64 00 	lds	r24, 0x0064
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	31 f4       	brne	.+12     	; 0xfe <App_Task+0x24>
  f2:	80 91 65 00 	lds	r24, 0x0065
  f6:	88 23       	and	r24, r24
  f8:	11 f4       	brne	.+4      	; 0xfe <App_Task+0x24>
	{
		LED_toggle();
  fa:	0e 94 b8 03 	call	0x770	; 0x770 <LED_toggle>
	}
	
	button_previous_state = button_current_state;
  fe:	80 91 64 00 	lds	r24, 0x0064
 102:	80 93 65 00 	sts	0x0065, r24
}
 106:	cf 91       	pop	r28
 108:	df 91       	pop	r29
 10a:	08 95       	ret

0000010c <BUTTON_getState>:

static uint8 g_button_state     = BUTTON_RELEASED;

/*******************************************************************************************************************/
uint8 BUTTON_getState(void)
{
 10c:	df 93       	push	r29
 10e:	cf 93       	push	r28
 110:	cd b7       	in	r28, 0x3d	; 61
 112:	de b7       	in	r29, 0x3e	; 62
	return g_button_state;
 114:	80 91 68 00 	lds	r24, 0x0068
}
 118:	cf 91       	pop	r28
 11a:	df 91       	pop	r29
 11c:	08 95       	ret

0000011e <BUTTON_refreshState>:
/*******************************************************************************************************************/
void BUTTON_refreshState(void)
{
 11e:	df 93       	push	r29
 120:	cf 93       	push	r28
 122:	0f 92       	push	r0
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
	uint8 state = Dio_ReadChannel(DioConf_BUTTON_CHANNEL_ID_INDEX);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 ab 01 	call	0x356	; 0x356 <Dio_ReadChannel>
 12e:	89 83       	std	Y+1, r24	; 0x01
	if(state == BUTTON_PRESSED)
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	81 30       	cpi	r24, 0x01	; 1
 134:	41 f4       	brne	.+16     	; 0x146 <BUTTON_refreshState+0x28>
	{
		g_Pressed_Count++;
 136:	80 91 66 00 	lds	r24, 0x0066
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	80 93 66 00 	sts	0x0066, r24
		g_Released_Count = 0;
 140:	10 92 67 00 	sts	0x0067, r1
 144:	07 c0       	rjmp	.+14     	; 0x154 <BUTTON_refreshState+0x36>
	}
	else
	{
		g_Released_Count++;
 146:	80 91 67 00 	lds	r24, 0x0067
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	80 93 67 00 	sts	0x0067, r24
		g_Pressed_Count = 0;
 150:	10 92 66 00 	sts	0x0066, r1
	}

	if(g_Pressed_Count == 3)
 154:	80 91 66 00 	lds	r24, 0x0066
 158:	83 30       	cpi	r24, 0x03	; 3
 15a:	41 f4       	brne	.+16     	; 0x16c <BUTTON_refreshState+0x4e>
	{
		g_button_state = BUTTON_PRESSED;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 68 00 	sts	0x0068, r24
		g_Pressed_Count       = 0;
 162:	10 92 66 00 	sts	0x0066, r1
		g_Released_Count      = 0;
 166:	10 92 67 00 	sts	0x0067, r1
 16a:	0a c0       	rjmp	.+20     	; 0x180 <BUTTON_refreshState+0x62>
	}
	else if(g_Released_Count == 3)
 16c:	80 91 67 00 	lds	r24, 0x0067
 170:	83 30       	cpi	r24, 0x03	; 3
 172:	31 f4       	brne	.+12     	; 0x180 <BUTTON_refreshState+0x62>
	{
		g_button_state = BUTTON_RELEASED;
 174:	10 92 68 00 	sts	0x0068, r1
		g_Released_Count      = 0;
 178:	10 92 67 00 	sts	0x0067, r1
		g_Pressed_Count       = 0;
 17c:	10 92 66 00 	sts	0x0066, r1
	}
}
 180:	0f 90       	pop	r0
 182:	cf 91       	pop	r28
 184:	df 91       	pop	r29
 186:	08 95       	ret

00000188 <Det_ReportError>:

void Det_ReportError( uint16 ModuleId,
                      uint8 InstanceId,
                      uint8 ApiId,
					  uint8 ErrorId )
{
 188:	df 93       	push	r29
 18a:	cf 93       	push	r28
 18c:	00 d0       	rcall	.+0      	; 0x18e <Det_ReportError+0x6>
 18e:	00 d0       	rcall	.+0      	; 0x190 <Det_ReportError+0x8>
 190:	0f 92       	push	r0
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
 196:	9a 83       	std	Y+2, r25	; 0x02
 198:	89 83       	std	Y+1, r24	; 0x01
 19a:	6b 83       	std	Y+3, r22	; 0x03
 19c:	4c 83       	std	Y+4, r20	; 0x04
 19e:	2d 83       	std	Y+5, r18	; 0x05
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <Det_ReportError+0x18>

000001a2 <Dio_Init>:
* Parameters (out): None
* Return value: None
* Description: Function to Initialize the Dio module.
************************************************************************************/
void Dio_Init(const Dio_ConfigType * ConfigPtr)
{
 1a2:	df 93       	push	r29
 1a4:	cf 93       	push	r28
 1a6:	00 d0       	rcall	.+0      	; 0x1a8 <Dio_Init+0x6>
 1a8:	cd b7       	in	r28, 0x3d	; 61
 1aa:	de b7       	in	r29, 0x3e	; 62
 1ac:	9a 83       	std	Y+2, r25	; 0x02
 1ae:	89 83       	std	Y+1, r24	; 0x01
#if (DIO_DEV_ERROR_DETECT == STD_ON)
	/* check if the input configuration pointer is not a NULL_PTR */
	if (NULL_PTR == ConfigPtr)
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	9a 81       	ldd	r25, Y+2	; 0x02
 1b4:	00 97       	sbiw	r24, 0x00	; 0
 1b6:	41 f4       	brne	.+16     	; 0x1c8 <Dio_Init+0x26>
	{
		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID, DIO_INIT_SID,
 1b8:	88 e7       	ldi	r24, 0x78	; 120
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	40 e1       	ldi	r20, 0x10	; 16
 1c0:	20 e1       	ldi	r18, 0x10	; 16
 1c2:	0e 94 c4 00 	call	0x188	; 0x188 <Det_ReportError>
 1c6:	09 c0       	rjmp	.+18     	; 0x1da <Dio_Init+0x38>
	{
		/*
		 * Set the module state to initialized and point to the PB configuration structure using a global pointer.
		 * This global pointer is global to be used by other functions to read the PB configuration structures
		 */
		Dio_Status       = DIO_INITIALIZED;
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	80 93 6b 00 	sts	0x006B, r24
		Dio_PortChannels = ConfigPtr->Channels; /* address of the first Channels structure --> Channels[0] */
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	9a 81       	ldd	r25, Y+2	; 0x02
 1d2:	90 93 6a 00 	sts	0x006A, r25
 1d6:	80 93 69 00 	sts	0x0069, r24
	}
}
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	cf 91       	pop	r28
 1e0:	df 91       	pop	r29
 1e2:	08 95       	ret

000001e4 <Dio_WriteChannel>:
* Parameters (out): None
* Return value: None
* Description: Function to set a level of a channel.
************************************************************************************/
void Dio_WriteChannel(Dio_ChannelType ChannelId, Dio_LevelType Level)
{
 1e4:	df 93       	push	r29
 1e6:	cf 93       	push	r28
 1e8:	cd b7       	in	r28, 0x3d	; 61
 1ea:	de b7       	in	r29, 0x3e	; 62
 1ec:	27 97       	sbiw	r28, 0x07	; 7
 1ee:	0f b6       	in	r0, 0x3f	; 63
 1f0:	f8 94       	cli
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	cd bf       	out	0x3d, r28	; 61
 1f8:	8c 83       	std	Y+4, r24	; 0x04
 1fa:	6d 83       	std	Y+5, r22	; 0x05
	Dio_PortLevelType * Port_Ptr = NULL_PTR;
 1fc:	1b 82       	std	Y+3, r1	; 0x03
 1fe:	1a 82       	std	Y+2, r1	; 0x02
	boolean error = FALSE;
 200:	19 82       	std	Y+1, r1	; 0x01

#if (DIO_DEV_ERROR_DETECT == STD_ON)
	/* Check if the Driver is initialized before using this function */
	if (DIO_NOT_INITIALIZED == Dio_Status)
 202:	80 91 6b 00 	lds	r24, 0x006B
 206:	88 23       	and	r24, r24
 208:	49 f4       	brne	.+18     	; 0x21c <Dio_WriteChannel+0x38>
	{
		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 20a:	88 e7       	ldi	r24, 0x78	; 120
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	41 e0       	ldi	r20, 0x01	; 1
 212:	20 ef       	ldi	r18, 0xF0	; 240
 214:	0e 94 c4 00 	call	0x188	; 0x188 <Det_ReportError>
				DIO_WRITE_CHANNEL_SID, DIO_E_UNINIT);
		error = TRUE;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* No Action Required */
	}
	/* Check if the used channel is within the valid range */
	if (DIO_CONFIGURED_CHANNLES <= ChannelId)
 21c:	8c 81       	ldd	r24, Y+4	; 0x04
 21e:	82 30       	cpi	r24, 0x02	; 2
 220:	48 f0       	brcs	.+18     	; 0x234 <Dio_WriteChannel+0x50>
	{

		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 222:	88 e7       	ldi	r24, 0x78	; 120
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	41 e0       	ldi	r20, 0x01	; 1
 22a:	2a e0       	ldi	r18, 0x0A	; 10
 22c:	0e 94 c4 00 	call	0x188	; 0x188 <Det_ReportError>
				DIO_WRITE_CHANNEL_SID, DIO_E_PARAM_INVALID_CHANNEL_ID);
		error = TRUE;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	89 83       	std	Y+1, r24	; 0x01
		/* No Action Required */
	}
#endif

	/* In-case there are no errors */
	if(FALSE == error)
 234:	89 81       	ldd	r24, Y+1	; 0x01
 236:	88 23       	and	r24, r24
 238:	09 f0       	breq	.+2      	; 0x23c <Dio_WriteChannel+0x58>
 23a:	84 c0       	rjmp	.+264    	; 0x344 <Dio_WriteChannel+0x160>
	{
		/* Point to the correct PORT register according to the Port Id stored in the Port_Num member */
		switch(Dio_PortChannels[ChannelId].Port_Num)
 23c:	20 91 69 00 	lds	r18, 0x0069
 240:	30 91 6a 00 	lds	r19, 0x006A
 244:	8c 81       	ldd	r24, Y+4	; 0x04
 246:	88 2f       	mov	r24, r24
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	f9 01       	movw	r30, r18
 250:	e8 0f       	add	r30, r24
 252:	f9 1f       	adc	r31, r25
 254:	80 81       	ld	r24, Z
 256:	28 2f       	mov	r18, r24
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	3f 83       	std	Y+7, r19	; 0x07
 25c:	2e 83       	std	Y+6, r18	; 0x06
 25e:	8e 81       	ldd	r24, Y+6	; 0x06
 260:	9f 81       	ldd	r25, Y+7	; 0x07
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	91 05       	cpc	r25, r1
 266:	d1 f0       	breq	.+52     	; 0x29c <Dio_WriteChannel+0xb8>
 268:	2e 81       	ldd	r18, Y+6	; 0x06
 26a:	3f 81       	ldd	r19, Y+7	; 0x07
 26c:	22 30       	cpi	r18, 0x02	; 2
 26e:	31 05       	cpc	r19, r1
 270:	2c f4       	brge	.+10     	; 0x27c <Dio_WriteChannel+0x98>
 272:	8e 81       	ldd	r24, Y+6	; 0x06
 274:	9f 81       	ldd	r25, Y+7	; 0x07
 276:	00 97       	sbiw	r24, 0x00	; 0
 278:	61 f0       	breq	.+24     	; 0x292 <Dio_WriteChannel+0xae>
 27a:	1e c0       	rjmp	.+60     	; 0x2b8 <Dio_WriteChannel+0xd4>
 27c:	2e 81       	ldd	r18, Y+6	; 0x06
 27e:	3f 81       	ldd	r19, Y+7	; 0x07
 280:	22 30       	cpi	r18, 0x02	; 2
 282:	31 05       	cpc	r19, r1
 284:	81 f0       	breq	.+32     	; 0x2a6 <Dio_WriteChannel+0xc2>
 286:	8e 81       	ldd	r24, Y+6	; 0x06
 288:	9f 81       	ldd	r25, Y+7	; 0x07
 28a:	83 30       	cpi	r24, 0x03	; 3
 28c:	91 05       	cpc	r25, r1
 28e:	81 f0       	breq	.+32     	; 0x2b0 <Dio_WriteChannel+0xcc>
 290:	13 c0       	rjmp	.+38     	; 0x2b8 <Dio_WriteChannel+0xd4>
		{
			case 0:	Port_Ptr = &PORTA_REG;
 292:	8b e3       	ldi	r24, 0x3B	; 59
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	9b 83       	std	Y+3, r25	; 0x03
 298:	8a 83       	std	Y+2, r24	; 0x02
 29a:	0e c0       	rjmp	.+28     	; 0x2b8 <Dio_WriteChannel+0xd4>
		        break;
			case 1:	Port_Ptr = &PORTB_REG;
 29c:	88 e3       	ldi	r24, 0x38	; 56
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	9b 83       	std	Y+3, r25	; 0x03
 2a2:	8a 83       	std	Y+2, r24	; 0x02
 2a4:	09 c0       	rjmp	.+18     	; 0x2b8 <Dio_WriteChannel+0xd4>
		        break;
			case 2:	Port_Ptr = &PORTC_REG;
 2a6:	85 e3       	ldi	r24, 0x35	; 53
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	9b 83       	std	Y+3, r25	; 0x03
 2ac:	8a 83       	std	Y+2, r24	; 0x02
 2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <Dio_WriteChannel+0xd4>
		        break;
			case 3:	Port_Ptr = &PORTD_REG;
 2b0:	82 e3       	ldi	r24, 0x32	; 50
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	9b 83       	std	Y+3, r25	; 0x03
 2b6:	8a 83       	std	Y+2, r24	; 0x02
		        break;
		}
		if(Level == STD_HIGH)
 2b8:	8d 81       	ldd	r24, Y+5	; 0x05
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	01 f5       	brne	.+64     	; 0x2fe <Dio_WriteChannel+0x11a>
		{
			/* Write Logic High */
			SET_BIT(*Port_Ptr,Dio_PortChannels[ChannelId].Ch_Num);
 2be:	ea 81       	ldd	r30, Y+2	; 0x02
 2c0:	fb 81       	ldd	r31, Y+3	; 0x03
 2c2:	80 81       	ld	r24, Z
 2c4:	48 2f       	mov	r20, r24
 2c6:	20 91 69 00 	lds	r18, 0x0069
 2ca:	30 91 6a 00 	lds	r19, 0x006A
 2ce:	8c 81       	ldd	r24, Y+4	; 0x04
 2d0:	88 2f       	mov	r24, r24
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	f9 01       	movw	r30, r18
 2da:	e8 0f       	add	r30, r24
 2dc:	f9 1f       	adc	r31, r25
 2de:	81 81       	ldd	r24, Z+1	; 0x01
 2e0:	28 2f       	mov	r18, r24
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 2e       	mov	r0, r18
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <Dio_WriteChannel+0x10c>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	0a 94       	dec	r0
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <Dio_WriteChannel+0x108>
 2f4:	84 2b       	or	r24, r20
 2f6:	ea 81       	ldd	r30, Y+2	; 0x02
 2f8:	fb 81       	ldd	r31, Y+3	; 0x03
 2fa:	80 83       	st	Z, r24
 2fc:	23 c0       	rjmp	.+70     	; 0x344 <Dio_WriteChannel+0x160>
		}
		else if(Level == STD_LOW)
 2fe:	8d 81       	ldd	r24, Y+5	; 0x05
 300:	88 23       	and	r24, r24
 302:	01 f5       	brne	.+64     	; 0x344 <Dio_WriteChannel+0x160>
		{
			/* Write Logic Low */
			CLEAR_BIT(*Port_Ptr,Dio_PortChannels[ChannelId].Ch_Num);
 304:	ea 81       	ldd	r30, Y+2	; 0x02
 306:	fb 81       	ldd	r31, Y+3	; 0x03
 308:	80 81       	ld	r24, Z
 30a:	48 2f       	mov	r20, r24
 30c:	20 91 69 00 	lds	r18, 0x0069
 310:	30 91 6a 00 	lds	r19, 0x006A
 314:	8c 81       	ldd	r24, Y+4	; 0x04
 316:	88 2f       	mov	r24, r24
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	f9 01       	movw	r30, r18
 320:	e8 0f       	add	r30, r24
 322:	f9 1f       	adc	r31, r25
 324:	81 81       	ldd	r24, Z+1	; 0x01
 326:	28 2f       	mov	r18, r24
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 2e       	mov	r0, r18
 330:	02 c0       	rjmp	.+4      	; 0x336 <Dio_WriteChannel+0x152>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	0a 94       	dec	r0
 338:	e2 f7       	brpl	.-8      	; 0x332 <Dio_WriteChannel+0x14e>
 33a:	80 95       	com	r24
 33c:	84 23       	and	r24, r20
 33e:	ea 81       	ldd	r30, Y+2	; 0x02
 340:	fb 81       	ldd	r31, Y+3	; 0x03
 342:	80 83       	st	Z, r24
	else
	{
		/* No Action Required */
	}

}
 344:	27 96       	adiw	r28, 0x07	; 7
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	f8 94       	cli
 34a:	de bf       	out	0x3e, r29	; 62
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	cd bf       	out	0x3d, r28	; 61
 350:	cf 91       	pop	r28
 352:	df 91       	pop	r29
 354:	08 95       	ret

00000356 <Dio_ReadChannel>:
* Parameters (out): None
* Return value: Dio_LevelType
* Description: Function to return the value of the specified DIO channel.
************************************************************************************/
Dio_LevelType Dio_ReadChannel(Dio_ChannelType ChannelId)
{
 356:	df 93       	push	r29
 358:	cf 93       	push	r28
 35a:	cd b7       	in	r28, 0x3d	; 61
 35c:	de b7       	in	r29, 0x3e	; 62
 35e:	28 97       	sbiw	r28, 0x08	; 8
 360:	0f b6       	in	r0, 0x3f	; 63
 362:	f8 94       	cli
 364:	de bf       	out	0x3e, r29	; 62
 366:	0f be       	out	0x3f, r0	; 63
 368:	cd bf       	out	0x3d, r28	; 61
 36a:	8d 83       	std	Y+5, r24	; 0x05
	Dio_PortLevelType * PIN_Ptr = NULL_PTR;
 36c:	1c 82       	std	Y+4, r1	; 0x04
 36e:	1b 82       	std	Y+3, r1	; 0x03
	Dio_LevelType output = STD_LOW;
 370:	1a 82       	std	Y+2, r1	; 0x02
	boolean error = FALSE;
 372:	19 82       	std	Y+1, r1	; 0x01

#if (DIO_DEV_ERROR_DETECT == STD_ON)
	/* Check if the Driver is initialized before using this function */
	if (DIO_NOT_INITIALIZED == Dio_Status)
 374:	80 91 6b 00 	lds	r24, 0x006B
 378:	88 23       	and	r24, r24
 37a:	49 f4       	brne	.+18     	; 0x38e <Dio_ReadChannel+0x38>
	{
		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 37c:	88 e7       	ldi	r24, 0x78	; 120
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	40 e0       	ldi	r20, 0x00	; 0
 384:	20 ef       	ldi	r18, 0xF0	; 240
 386:	0e 94 c4 00 	call	0x188	; 0x188 <Det_ReportError>
				DIO_READ_CHANNEL_SID, DIO_E_UNINIT);
		error = TRUE;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* No Action Required */
	}
	/* Check if the used channel is within the valid range */
	if (DIO_CONFIGURED_CHANNLES <= ChannelId)
 38e:	8d 81       	ldd	r24, Y+5	; 0x05
 390:	82 30       	cpi	r24, 0x02	; 2
 392:	48 f0       	brcs	.+18     	; 0x3a6 <Dio_ReadChannel+0x50>
	{

		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 394:	88 e7       	ldi	r24, 0x78	; 120
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	40 e0       	ldi	r20, 0x00	; 0
 39c:	2a e0       	ldi	r18, 0x0A	; 10
 39e:	0e 94 c4 00 	call	0x188	; 0x188 <Det_ReportError>
				DIO_READ_CHANNEL_SID, DIO_E_PARAM_INVALID_CHANNEL_ID);
		error = TRUE;
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	89 83       	std	Y+1, r24	; 0x01
		/* No Action Required */
	}
#endif

	/* In-case there are no errors */
	if(FALSE == error)
 3a6:	89 81       	ldd	r24, Y+1	; 0x01
 3a8:	88 23       	and	r24, r24
 3aa:	09 f0       	breq	.+2      	; 0x3ae <Dio_ReadChannel+0x58>
 3ac:	65 c0       	rjmp	.+202    	; 0x478 <__stack+0x19>
	{
		/* Point to the correct PIN register according to the Port Id stored in the Port_Num member */
		switch(Dio_PortChannels[ChannelId].Port_Num)
 3ae:	20 91 69 00 	lds	r18, 0x0069
 3b2:	30 91 6a 00 	lds	r19, 0x006A
 3b6:	8d 81       	ldd	r24, Y+5	; 0x05
 3b8:	88 2f       	mov	r24, r24
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	88 0f       	add	r24, r24
 3be:	99 1f       	adc	r25, r25
 3c0:	f9 01       	movw	r30, r18
 3c2:	e8 0f       	add	r30, r24
 3c4:	f9 1f       	adc	r31, r25
 3c6:	80 81       	ld	r24, Z
 3c8:	28 2f       	mov	r18, r24
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	3f 83       	std	Y+7, r19	; 0x07
 3ce:	2e 83       	std	Y+6, r18	; 0x06
 3d0:	8e 81       	ldd	r24, Y+6	; 0x06
 3d2:	9f 81       	ldd	r25, Y+7	; 0x07
 3d4:	81 30       	cpi	r24, 0x01	; 1
 3d6:	91 05       	cpc	r25, r1
 3d8:	d1 f0       	breq	.+52     	; 0x40e <Dio_ReadChannel+0xb8>
 3da:	2e 81       	ldd	r18, Y+6	; 0x06
 3dc:	3f 81       	ldd	r19, Y+7	; 0x07
 3de:	22 30       	cpi	r18, 0x02	; 2
 3e0:	31 05       	cpc	r19, r1
 3e2:	2c f4       	brge	.+10     	; 0x3ee <Dio_ReadChannel+0x98>
 3e4:	8e 81       	ldd	r24, Y+6	; 0x06
 3e6:	9f 81       	ldd	r25, Y+7	; 0x07
 3e8:	00 97       	sbiw	r24, 0x00	; 0
 3ea:	61 f0       	breq	.+24     	; 0x404 <Dio_ReadChannel+0xae>
 3ec:	1e c0       	rjmp	.+60     	; 0x42a <Dio_ReadChannel+0xd4>
 3ee:	2e 81       	ldd	r18, Y+6	; 0x06
 3f0:	3f 81       	ldd	r19, Y+7	; 0x07
 3f2:	22 30       	cpi	r18, 0x02	; 2
 3f4:	31 05       	cpc	r19, r1
 3f6:	81 f0       	breq	.+32     	; 0x418 <Dio_ReadChannel+0xc2>
 3f8:	8e 81       	ldd	r24, Y+6	; 0x06
 3fa:	9f 81       	ldd	r25, Y+7	; 0x07
 3fc:	83 30       	cpi	r24, 0x03	; 3
 3fe:	91 05       	cpc	r25, r1
 400:	81 f0       	breq	.+32     	; 0x422 <Dio_ReadChannel+0xcc>
 402:	13 c0       	rjmp	.+38     	; 0x42a <Dio_ReadChannel+0xd4>
		{
		case 0:	PIN_Ptr = &PINA_REG;
 404:	89 e3       	ldi	r24, 0x39	; 57
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	9c 83       	std	Y+4, r25	; 0x04
 40a:	8b 83       	std	Y+3, r24	; 0x03
 40c:	0e c0       	rjmp	.+28     	; 0x42a <Dio_ReadChannel+0xd4>
		break;
		case 1:	PIN_Ptr = &PINB_REG;
 40e:	86 e3       	ldi	r24, 0x36	; 54
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	9c 83       	std	Y+4, r25	; 0x04
 414:	8b 83       	std	Y+3, r24	; 0x03
 416:	09 c0       	rjmp	.+18     	; 0x42a <Dio_ReadChannel+0xd4>
		break;
		case 2:	PIN_Ptr = &PINC_REG;
 418:	83 e3       	ldi	r24, 0x33	; 51
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	9c 83       	std	Y+4, r25	; 0x04
 41e:	8b 83       	std	Y+3, r24	; 0x03
 420:	04 c0       	rjmp	.+8      	; 0x42a <Dio_ReadChannel+0xd4>
		break;
		case 3:	PIN_Ptr = &PIND_REG;
 422:	80 e3       	ldi	r24, 0x30	; 48
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	9c 83       	std	Y+4, r25	; 0x04
 428:	8b 83       	std	Y+3, r24	; 0x03
		break;
		}
		/* Read the required channel */
		if(BIT_IS_SET(*PIN_Ptr,Dio_PortChannels[ChannelId].Ch_Num))
 42a:	eb 81       	ldd	r30, Y+3	; 0x03
 42c:	fc 81       	ldd	r31, Y+4	; 0x04
 42e:	80 81       	ld	r24, Z
 430:	48 2f       	mov	r20, r24
 432:	50 e0       	ldi	r21, 0x00	; 0
 434:	20 91 69 00 	lds	r18, 0x0069
 438:	30 91 6a 00 	lds	r19, 0x006A
 43c:	8d 81       	ldd	r24, Y+5	; 0x05
 43e:	88 2f       	mov	r24, r24
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	f9 01       	movw	r30, r18
 448:	e8 0f       	add	r30, r24
 44a:	f9 1f       	adc	r31, r25
 44c:	81 81       	ldd	r24, Z+1	; 0x01
 44e:	88 2f       	mov	r24, r24
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	9a 01       	movw	r18, r20
 454:	02 c0       	rjmp	.+4      	; 0x45a <Dio_ReadChannel+0x104>
 456:	35 95       	asr	r19
 458:	27 95       	ror	r18
 45a:	8a 95       	dec	r24
 45c:	e2 f7       	brpl	.-8      	; 0x456 <Dio_ReadChannel+0x100>
 45e:	c9 01       	movw	r24, r18
 460:	81 70       	andi	r24, 0x01	; 1
 462:	90 70       	andi	r25, 0x00	; 0
 464:	88 23       	and	r24, r24
 466:	19 f0       	breq	.+6      	; 0x46e <__stack+0xf>
		{
			output = STD_HIGH;
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	8a 83       	std	Y+2, r24	; 0x02
 46c:	01 c0       	rjmp	.+2      	; 0x470 <__stack+0x11>
		}
		else
		{
			output = STD_LOW;
 46e:	1a 82       	std	Y+2, r1	; 0x02
		}
		return output;
 470:	8a 81       	ldd	r24, Y+2	; 0x02
 472:	88 87       	std	Y+8, r24	; 0x08
	}
	else
	{
		/* No Action Required */
	}
}
 474:	88 85       	ldd	r24, Y+8	; 0x08
 476:	00 c0       	rjmp	.+0      	; 0x478 <__stack+0x19>
 478:	28 96       	adiw	r28, 0x08	; 8
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	f8 94       	cli
 47e:	de bf       	out	0x3e, r29	; 62
 480:	0f be       	out	0x3f, r0	; 63
 482:	cd bf       	out	0x3d, r28	; 61
 484:	cf 91       	pop	r28
 486:	df 91       	pop	r29
 488:	08 95       	ret

0000048a <Dio_FlipChannel>:
* Return value: Dio_LevelType
* Description: Function to flip the level of a channel and return the level of the channel after flip.
************************************************************************************/
#if (DIO_FLIP_CHANNEL_API == STD_ON)
Dio_LevelType Dio_FlipChannel(Dio_ChannelType ChannelId)
{
 48a:	df 93       	push	r29
 48c:	cf 93       	push	r28
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
 492:	2a 97       	sbiw	r28, 0x0a	; 10
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
 49e:	8f 83       	std	Y+7, r24	; 0x07
	Dio_PortLevelType * Port_Ptr = NULL_PTR;
 4a0:	1e 82       	std	Y+6, r1	; 0x06
 4a2:	1d 82       	std	Y+5, r1	; 0x05
	Dio_PortLevelType * PIN_Ptr = NULL_PTR;
 4a4:	1c 82       	std	Y+4, r1	; 0x04
 4a6:	1b 82       	std	Y+3, r1	; 0x03
	Dio_LevelType output = STD_LOW;
 4a8:	1a 82       	std	Y+2, r1	; 0x02
	boolean error = FALSE;
 4aa:	19 82       	std	Y+1, r1	; 0x01

#if (DIO_DEV_ERROR_DETECT == STD_ON)
	/* Check if the Driver is initialized before using this function */
	if (DIO_NOT_INITIALIZED == Dio_Status)
 4ac:	80 91 6b 00 	lds	r24, 0x006B
 4b0:	88 23       	and	r24, r24
 4b2:	49 f4       	brne	.+18     	; 0x4c6 <Dio_FlipChannel+0x3c>
	{
		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 4b4:	88 e7       	ldi	r24, 0x78	; 120
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	41 e1       	ldi	r20, 0x11	; 17
 4bc:	20 ef       	ldi	r18, 0xF0	; 240
 4be:	0e 94 c4 00 	call	0x188	; 0x188 <Det_ReportError>
				DIO_FLIP_CHANNEL_SID, DIO_E_UNINIT);
		error = TRUE;
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/* No Action Required */
	}
	/* Check if the used channel is within the valid range */
	if (DIO_CONFIGURED_CHANNLES <= ChannelId)
 4c6:	8f 81       	ldd	r24, Y+7	; 0x07
 4c8:	82 30       	cpi	r24, 0x02	; 2
 4ca:	48 f0       	brcs	.+18     	; 0x4de <Dio_FlipChannel+0x54>
	{

		Det_ReportError(DIO_MODULE_ID, DIO_INSTANCE_ID,
 4cc:	88 e7       	ldi	r24, 0x78	; 120
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	41 e1       	ldi	r20, 0x11	; 17
 4d4:	2a e0       	ldi	r18, 0x0A	; 10
 4d6:	0e 94 c4 00 	call	0x188	; 0x188 <Det_ReportError>
				DIO_FLIP_CHANNEL_SID, DIO_E_PARAM_INVALID_CHANNEL_ID);
		error = TRUE;
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	89 83       	std	Y+1, r24	; 0x01
		/* No Action Required */
	}
#endif

	/* In-case there are no errors */
	if(FALSE == error)
 4de:	89 81       	ldd	r24, Y+1	; 0x01
 4e0:	88 23       	and	r24, r24
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <Dio_FlipChannel+0x5c>
 4e4:	b4 c0       	rjmp	.+360    	; 0x64e <Dio_FlipChannel+0x1c4>
	{
		/* Point to the correct PIN & PORT register according to the Port Id stored in the Port_Num member */
		switch(Dio_PortChannels[ChannelId].Port_Num)
 4e6:	20 91 69 00 	lds	r18, 0x0069
 4ea:	30 91 6a 00 	lds	r19, 0x006A
 4ee:	8f 81       	ldd	r24, Y+7	; 0x07
 4f0:	88 2f       	mov	r24, r24
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	f9 01       	movw	r30, r18
 4fa:	e8 0f       	add	r30, r24
 4fc:	f9 1f       	adc	r31, r25
 4fe:	80 81       	ld	r24, Z
 500:	28 2f       	mov	r18, r24
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	39 87       	std	Y+9, r19	; 0x09
 506:	28 87       	std	Y+8, r18	; 0x08
 508:	88 85       	ldd	r24, Y+8	; 0x08
 50a:	99 85       	ldd	r25, Y+9	; 0x09
 50c:	81 30       	cpi	r24, 0x01	; 1
 50e:	91 05       	cpc	r25, r1
 510:	f1 f0       	breq	.+60     	; 0x54e <Dio_FlipChannel+0xc4>
 512:	28 85       	ldd	r18, Y+8	; 0x08
 514:	39 85       	ldd	r19, Y+9	; 0x09
 516:	22 30       	cpi	r18, 0x02	; 2
 518:	31 05       	cpc	r19, r1
 51a:	2c f4       	brge	.+10     	; 0x526 <Dio_FlipChannel+0x9c>
 51c:	88 85       	ldd	r24, Y+8	; 0x08
 51e:	99 85       	ldd	r25, Y+9	; 0x09
 520:	00 97       	sbiw	r24, 0x00	; 0
 522:	61 f0       	breq	.+24     	; 0x53c <Dio_FlipChannel+0xb2>
 524:	2e c0       	rjmp	.+92     	; 0x582 <Dio_FlipChannel+0xf8>
 526:	28 85       	ldd	r18, Y+8	; 0x08
 528:	39 85       	ldd	r19, Y+9	; 0x09
 52a:	22 30       	cpi	r18, 0x02	; 2
 52c:	31 05       	cpc	r19, r1
 52e:	c1 f0       	breq	.+48     	; 0x560 <Dio_FlipChannel+0xd6>
 530:	88 85       	ldd	r24, Y+8	; 0x08
 532:	99 85       	ldd	r25, Y+9	; 0x09
 534:	83 30       	cpi	r24, 0x03	; 3
 536:	91 05       	cpc	r25, r1
 538:	e1 f0       	breq	.+56     	; 0x572 <Dio_FlipChannel+0xe8>
 53a:	23 c0       	rjmp	.+70     	; 0x582 <Dio_FlipChannel+0xf8>
		{
		case 0:	Port_Ptr = &PORTA_REG;
 53c:	8b e3       	ldi	r24, 0x3B	; 59
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	9e 83       	std	Y+6, r25	; 0x06
 542:	8d 83       	std	Y+5, r24	; 0x05
		        PIN_Ptr  = &PINA_REG;
 544:	89 e3       	ldi	r24, 0x39	; 57
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	9c 83       	std	Y+4, r25	; 0x04
 54a:	8b 83       	std	Y+3, r24	; 0x03
 54c:	1a c0       	rjmp	.+52     	; 0x582 <Dio_FlipChannel+0xf8>
		break;
		case 1:	Port_Ptr = &PORTB_REG;
 54e:	88 e3       	ldi	r24, 0x38	; 56
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	9e 83       	std	Y+6, r25	; 0x06
 554:	8d 83       	std	Y+5, r24	; 0x05
		        PIN_Ptr  = &PINB_REG;
 556:	86 e3       	ldi	r24, 0x36	; 54
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	9c 83       	std	Y+4, r25	; 0x04
 55c:	8b 83       	std	Y+3, r24	; 0x03
 55e:	11 c0       	rjmp	.+34     	; 0x582 <Dio_FlipChannel+0xf8>
		break;
		case 2:	Port_Ptr = &PORTC_REG;
 560:	85 e3       	ldi	r24, 0x35	; 53
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	9e 83       	std	Y+6, r25	; 0x06
 566:	8d 83       	std	Y+5, r24	; 0x05
		        PIN_Ptr  = &PINC_REG;
 568:	83 e3       	ldi	r24, 0x33	; 51
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	9c 83       	std	Y+4, r25	; 0x04
 56e:	8b 83       	std	Y+3, r24	; 0x03
 570:	08 c0       	rjmp	.+16     	; 0x582 <Dio_FlipChannel+0xf8>
		break;
		case 3:	Port_Ptr = &PORTD_REG;
 572:	82 e3       	ldi	r24, 0x32	; 50
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	9e 83       	std	Y+6, r25	; 0x06
 578:	8d 83       	std	Y+5, r24	; 0x05
		        PIN_Ptr  = &PIND_REG;
 57a:	80 e3       	ldi	r24, 0x30	; 48
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	9c 83       	std	Y+4, r25	; 0x04
 580:	8b 83       	std	Y+3, r24	; 0x03
		break;
		}
		/* Read the required channel and write the required level */
		if(BIT_IS_SET(*PIN_Ptr,Dio_PortChannels[ChannelId].Ch_Num))
 582:	eb 81       	ldd	r30, Y+3	; 0x03
 584:	fc 81       	ldd	r31, Y+4	; 0x04
 586:	80 81       	ld	r24, Z
 588:	48 2f       	mov	r20, r24
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	20 91 69 00 	lds	r18, 0x0069
 590:	30 91 6a 00 	lds	r19, 0x006A
 594:	8f 81       	ldd	r24, Y+7	; 0x07
 596:	88 2f       	mov	r24, r24
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	88 0f       	add	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	f9 01       	movw	r30, r18
 5a0:	e8 0f       	add	r30, r24
 5a2:	f9 1f       	adc	r31, r25
 5a4:	81 81       	ldd	r24, Z+1	; 0x01
 5a6:	88 2f       	mov	r24, r24
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	9a 01       	movw	r18, r20
 5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <Dio_FlipChannel+0x128>
 5ae:	35 95       	asr	r19
 5b0:	27 95       	ror	r18
 5b2:	8a 95       	dec	r24
 5b4:	e2 f7       	brpl	.-8      	; 0x5ae <Dio_FlipChannel+0x124>
 5b6:	c9 01       	movw	r24, r18
 5b8:	81 70       	andi	r24, 0x01	; 1
 5ba:	90 70       	andi	r25, 0x00	; 0
 5bc:	88 23       	and	r24, r24
 5be:	11 f1       	breq	.+68     	; 0x604 <Dio_FlipChannel+0x17a>
		{
			CLEAR_BIT(*Port_Ptr,Dio_PortChannels[ChannelId].Ch_Num);
 5c0:	ed 81       	ldd	r30, Y+5	; 0x05
 5c2:	fe 81       	ldd	r31, Y+6	; 0x06
 5c4:	80 81       	ld	r24, Z
 5c6:	48 2f       	mov	r20, r24
 5c8:	20 91 69 00 	lds	r18, 0x0069
 5cc:	30 91 6a 00 	lds	r19, 0x006A
 5d0:	8f 81       	ldd	r24, Y+7	; 0x07
 5d2:	88 2f       	mov	r24, r24
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	88 0f       	add	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	f9 01       	movw	r30, r18
 5dc:	e8 0f       	add	r30, r24
 5de:	f9 1f       	adc	r31, r25
 5e0:	81 81       	ldd	r24, Z+1	; 0x01
 5e2:	28 2f       	mov	r18, r24
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	02 2e       	mov	r0, r18
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <Dio_FlipChannel+0x168>
 5ee:	88 0f       	add	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	0a 94       	dec	r0
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <Dio_FlipChannel+0x164>
 5f6:	80 95       	com	r24
 5f8:	84 23       	and	r24, r20
 5fa:	ed 81       	ldd	r30, Y+5	; 0x05
 5fc:	fe 81       	ldd	r31, Y+6	; 0x06
 5fe:	80 83       	st	Z, r24
			output = STD_LOW;
 600:	1a 82       	std	Y+2, r1	; 0x02
 602:	21 c0       	rjmp	.+66     	; 0x646 <Dio_FlipChannel+0x1bc>
		}
		else
		{
			SET_BIT(*Port_Ptr,Dio_PortChannels[ChannelId].Ch_Num);
 604:	ed 81       	ldd	r30, Y+5	; 0x05
 606:	fe 81       	ldd	r31, Y+6	; 0x06
 608:	80 81       	ld	r24, Z
 60a:	48 2f       	mov	r20, r24
 60c:	20 91 69 00 	lds	r18, 0x0069
 610:	30 91 6a 00 	lds	r19, 0x006A
 614:	8f 81       	ldd	r24, Y+7	; 0x07
 616:	88 2f       	mov	r24, r24
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	f9 01       	movw	r30, r18
 620:	e8 0f       	add	r30, r24
 622:	f9 1f       	adc	r31, r25
 624:	81 81       	ldd	r24, Z+1	; 0x01
 626:	28 2f       	mov	r18, r24
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	02 2e       	mov	r0, r18
 630:	02 c0       	rjmp	.+4      	; 0x636 <Dio_FlipChannel+0x1ac>
 632:	88 0f       	add	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	0a 94       	dec	r0
 638:	e2 f7       	brpl	.-8      	; 0x632 <Dio_FlipChannel+0x1a8>
 63a:	84 2b       	or	r24, r20
 63c:	ed 81       	ldd	r30, Y+5	; 0x05
 63e:	fe 81       	ldd	r31, Y+6	; 0x06
 640:	80 83       	st	Z, r24
			output = STD_HIGH;
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	8a 83       	std	Y+2, r24	; 0x02
		}
		return output;
 646:	8a 81       	ldd	r24, Y+2	; 0x02
 648:	8a 87       	std	Y+10, r24	; 0x0a
	}
	else
	{
		/* No Action Required */
	}
}
 64a:	8a 85       	ldd	r24, Y+10	; 0x0a
 64c:	00 c0       	rjmp	.+0      	; 0x64e <Dio_FlipChannel+0x1c4>
 64e:	2a 96       	adiw	r28, 0x0a	; 10
 650:	0f b6       	in	r0, 0x3f	; 63
 652:	f8 94       	cli
 654:	de bf       	out	0x3e, r29	; 62
 656:	0f be       	out	0x3f, r0	; 63
 658:	cd bf       	out	0x3d, r28	; 61
 65a:	cf 91       	pop	r28
 65c:	df 91       	pop	r29
 65e:	08 95       	ret

00000660 <Timer0_start>:
 * to be used in Call Back */
static volatile void (*g_Timer0_Call_Back_Ptr)(void) = NULL_PTR;

/*********************************************************************************************/ 
void Timer0_start(uint8 Tick_Time)
{
 660:	df 93       	push	r29
 662:	cf 93       	push	r28
 664:	0f 92       	push	r0
 666:	cd b7       	in	r28, 0x3d	; 61
 668:	de b7       	in	r29, 0x3e	; 62
 66a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0  = 0; /* Timer0 initial value */
 66c:	e2 e5       	ldi	r30, 0x52	; 82
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	10 82       	st	Z, r1
	OCR0   = Tick_Time; /* Set Compare Register Value */
 672:	ec e5       	ldi	r30, 0x5C	; 92
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	89 81       	ldd	r24, Y+1	; 0x01
 678:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE0); /* Enable Compare Interrupt for Timer0 */
 67a:	a9 e5       	ldi	r26, 0x59	; 89
 67c:	b0 e0       	ldi	r27, 0x00	; 0
 67e:	e9 e5       	ldi	r30, 0x59	; 89
 680:	f0 e0       	ldi	r31, 0x00	; 0
 682:	80 81       	ld	r24, Z
 684:	82 60       	ori	r24, 0x02	; 2
 686:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. No need for OC0 so COM00=0 & COM01=0  
	 * 4. start Timer0 by initiating clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0  = (1<<FOC0) | (1<<WGM01) | (1<<CS02) | (1<<CS00);
 688:	e3 e5       	ldi	r30, 0x53	; 83
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	8d e8       	ldi	r24, 0x8D	; 141
 68e:	80 83       	st	Z, r24
}
 690:	0f 90       	pop	r0
 692:	cf 91       	pop	r28
 694:	df 91       	pop	r29
 696:	08 95       	ret

00000698 <Timer0_setCallBack>:
/*********************************************************************************************/
void Timer0_setCallBack(void(*Ptr2Func)(void))
{
 698:	df 93       	push	r29
 69a:	cf 93       	push	r28
 69c:	00 d0       	rcall	.+0      	; 0x69e <Timer0_setCallBack+0x6>
 69e:	cd b7       	in	r28, 0x3d	; 61
 6a0:	de b7       	in	r29, 0x3e	; 62
 6a2:	9a 83       	std	Y+2, r25	; 0x02
 6a4:	89 83       	std	Y+1, r24	; 0x01
	g_Timer0_Call_Back_Ptr = Ptr2Func;
 6a6:	89 81       	ldd	r24, Y+1	; 0x01
 6a8:	9a 81       	ldd	r25, Y+2	; 0x02
 6aa:	90 93 6d 00 	sts	0x006D, r25
 6ae:	80 93 6c 00 	sts	0x006C, r24
}
 6b2:	0f 90       	pop	r0
 6b4:	0f 90       	pop	r0
 6b6:	cf 91       	pop	r28
 6b8:	df 91       	pop	r29
 6ba:	08 95       	ret

000006bc <__vector_19>:
/*********************************************************************************************/
/* Interrupt Service Routine for Timer0 compare mode */
ISR(TIMER0_COMP_vect)
{
 6bc:	1f 92       	push	r1
 6be:	0f 92       	push	r0
 6c0:	0f b6       	in	r0, 0x3f	; 63
 6c2:	0f 92       	push	r0
 6c4:	11 24       	eor	r1, r1
 6c6:	2f 93       	push	r18
 6c8:	3f 93       	push	r19
 6ca:	4f 93       	push	r20
 6cc:	5f 93       	push	r21
 6ce:	6f 93       	push	r22
 6d0:	7f 93       	push	r23
 6d2:	8f 93       	push	r24
 6d4:	9f 93       	push	r25
 6d6:	af 93       	push	r26
 6d8:	bf 93       	push	r27
 6da:	ef 93       	push	r30
 6dc:	ff 93       	push	r31
 6de:	df 93       	push	r29
 6e0:	cf 93       	push	r28
 6e2:	cd b7       	in	r28, 0x3d	; 61
 6e4:	de b7       	in	r29, 0x3e	; 62
	/* Check if the Timer0_setCallBack is already called */
	if(g_Timer0_Call_Back_Ptr != NULL_PTR)
 6e6:	80 91 6c 00 	lds	r24, 0x006C
 6ea:	90 91 6d 00 	lds	r25, 0x006D
 6ee:	00 97       	sbiw	r24, 0x00	; 0
 6f0:	29 f0       	breq	.+10     	; 0x6fc <__vector_19+0x40>
	{
		(*g_Timer0_Call_Back_Ptr)(); //call the function in the scheduler using call-back concept
 6f2:	e0 91 6c 00 	lds	r30, 0x006C
 6f6:	f0 91 6d 00 	lds	r31, 0x006D
 6fa:	09 95       	icall
	}
}
 6fc:	cf 91       	pop	r28
 6fe:	df 91       	pop	r29
 700:	ff 91       	pop	r31
 702:	ef 91       	pop	r30
 704:	bf 91       	pop	r27
 706:	af 91       	pop	r26
 708:	9f 91       	pop	r25
 70a:	8f 91       	pop	r24
 70c:	7f 91       	pop	r23
 70e:	6f 91       	pop	r22
 710:	5f 91       	pop	r21
 712:	4f 91       	pop	r20
 714:	3f 91       	pop	r19
 716:	2f 91       	pop	r18
 718:	0f 90       	pop	r0
 71a:	0f be       	out	0x3f, r0	; 63
 71c:	0f 90       	pop	r0
 71e:	1f 90       	pop	r1
 720:	18 95       	reti

00000722 <LED_setOn>:
 ******************************************************************************/
#include "Port.h"
#include "Dio.h"
#include "Led.h"
void LED_setOn(void)
{
 722:	df 93       	push	r29
 724:	cf 93       	push	r28
 726:	cd b7       	in	r28, 0x3d	; 61
 728:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(DioConf_LED_CHANNEL_ID_INDEX,LED_ON); // LED ON
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	61 e0       	ldi	r22, 0x01	; 1
 72e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Dio_WriteChannel>
}
 732:	cf 91       	pop	r28
 734:	df 91       	pop	r29
 736:	08 95       	ret

00000738 <LED_setOff>:
/*********************************************************************************************/
void LED_setOff(void)
{
 738:	df 93       	push	r29
 73a:	cf 93       	push	r28
 73c:	cd b7       	in	r28, 0x3d	; 61
 73e:	de b7       	in	r29, 0x3e	; 62
	Dio_WriteChannel(DioConf_LED_CHANNEL_ID_INDEX,LED_OFF); // LED OFF
 740:	80 e0       	ldi	r24, 0x00	; 0
 742:	60 e0       	ldi	r22, 0x00	; 0
 744:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Dio_WriteChannel>
}
 748:	cf 91       	pop	r28
 74a:	df 91       	pop	r29
 74c:	08 95       	ret

0000074e <LED_refreshOutput>:
/*********************************************************************************************/
void LED_refreshOutput(void)
{
 74e:	df 93       	push	r29
 750:	cf 93       	push	r28
 752:	0f 92       	push	r0
 754:	cd b7       	in	r28, 0x3d	; 61
 756:	de b7       	in	r29, 0x3e	; 62
	Dio_LevelType state = Dio_ReadChannel(DioConf_LED_CHANNEL_ID_INDEX);
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	0e 94 ab 01 	call	0x356	; 0x356 <Dio_ReadChannel>
 75e:	89 83       	std	Y+1, r24	; 0x01
	Dio_WriteChannel(DioConf_LED_CHANNEL_ID_INDEX,state); // re-write the same value
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	69 81       	ldd	r22, Y+1	; 0x01
 764:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Dio_WriteChannel>
}
 768:	0f 90       	pop	r0
 76a:	cf 91       	pop	r28
 76c:	df 91       	pop	r29
 76e:	08 95       	ret

00000770 <LED_toggle>:
/*********************************************************************************************/
void LED_toggle(void)
{
 770:	df 93       	push	r29
 772:	cf 93       	push	r28
 774:	0f 92       	push	r0
 776:	cd b7       	in	r28, 0x3d	; 61
 778:	de b7       	in	r29, 0x3e	; 62
	Dio_LevelType state = Dio_FlipChannel(DioConf_LED_CHANNEL_ID_INDEX);
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	0e 94 45 02 	call	0x48a	; 0x48a <Dio_FlipChannel>
 780:	89 83       	std	Y+1, r24	; 0x01
}
 782:	0f 90       	pop	r0
 784:	cf 91       	pop	r28
 786:	df 91       	pop	r29
 788:	08 95       	ret

0000078a <Os_start>:
/* Global variable to indicate the the timer has a new tick */
static uint8 g_New_Time_Tick_Flag = 0;

/*********************************************************************************************/
void Os_start(void)
{
 78a:	df 93       	push	r29
 78c:	cf 93       	push	r28
 78e:	cd b7       	in	r28, 0x3d	; 61
 790:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Set the Call Back function call to Scheduler_New_Timer_Tick
	 * this function will be called every Timer0 Compare Interrupt(20ms)
	 */
	Timer0_setCallBack(Os_newTimerTick);
 792:	85 ed       	ldi	r24, 0xD5	; 213
 794:	93 e0       	ldi	r25, 0x03	; 3
 796:	0e 94 4c 03 	call	0x698	; 0x698 <Timer0_setCallBack>

	/* Start Timer0 in Compare Mode to generate interrupt every 20ms */
	Timer0_start(OS_BASE_TIME);
 79a:	84 e1       	ldi	r24, 0x14	; 20
 79c:	0e 94 30 03 	call	0x660	; 0x660 <Timer0_start>

	/* Execute the Init Task */

	/* Start the Os Scheduler */
	Os_scheduler();
 7a0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <Os_scheduler>
}
 7a4:	cf 91       	pop	r28
 7a6:	df 91       	pop	r29
 7a8:	08 95       	ret

000007aa <Os_newTimerTick>:
/*********************************************************************************************/
void Os_newTimerTick(void)
{
 7aa:	df 93       	push	r29
 7ac:	cf 93       	push	r28
 7ae:	cd b7       	in	r28, 0x3d	; 61
 7b0:	de b7       	in	r29, 0x3e	; 62
	/* increment the Os time by OS_BASE_TIME */
	g_Time_Tick_Count   += OS_BASE_TIME;
 7b2:	80 91 6e 00 	lds	r24, 0x006E
 7b6:	8c 5e       	subi	r24, 0xEC	; 236
 7b8:	80 93 6e 00 	sts	0x006E, r24

	/* Set the flag to 1 to indicate that there is a new timer tick */
	g_New_Time_Tick_Flag = 1;
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	80 93 6f 00 	sts	0x006F, r24
}
 7c2:	cf 91       	pop	r28
 7c4:	df 91       	pop	r29
 7c6:	08 95       	ret

000007c8 <Os_scheduler>:
/*********************************************************************************************/
void Os_scheduler(void)
{
 7c8:	df 93       	push	r29
 7ca:	cf 93       	push	r28
 7cc:	00 d0       	rcall	.+0      	; 0x7ce <Os_scheduler+0x6>
 7ce:	cd b7       	in	r28, 0x3d	; 61
 7d0:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		/* Code is only executed in case there is a new timer tick */
		if(g_New_Time_Tick_Flag == 1)
 7d2:	80 91 6f 00 	lds	r24, 0x006F
 7d6:	81 30       	cpi	r24, 0x01	; 1
 7d8:	e1 f7       	brne	.-8      	; 0x7d2 <Os_scheduler+0xa>
		{
			switch(g_Time_Tick_Count)
 7da:	80 91 6e 00 	lds	r24, 0x006E
 7de:	28 2f       	mov	r18, r24
 7e0:	30 e0       	ldi	r19, 0x00	; 0
 7e2:	3a 83       	std	Y+2, r19	; 0x02
 7e4:	29 83       	std	Y+1, r18	; 0x01
 7e6:	89 81       	ldd	r24, Y+1	; 0x01
 7e8:	9a 81       	ldd	r25, Y+2	; 0x02
 7ea:	8c 33       	cpi	r24, 0x3C	; 60
 7ec:	91 05       	cpc	r25, r1
 7ee:	61 f1       	breq	.+88     	; 0x848 <Os_scheduler+0x80>
 7f0:	29 81       	ldd	r18, Y+1	; 0x01
 7f2:	3a 81       	ldd	r19, Y+2	; 0x02
 7f4:	2d 33       	cpi	r18, 0x3D	; 61
 7f6:	31 05       	cpc	r19, r1
 7f8:	5c f4       	brge	.+22     	; 0x810 <Os_scheduler+0x48>
 7fa:	89 81       	ldd	r24, Y+1	; 0x01
 7fc:	9a 81       	ldd	r25, Y+2	; 0x02
 7fe:	84 31       	cpi	r24, 0x14	; 20
 800:	91 05       	cpc	r25, r1
 802:	b1 f0       	breq	.+44     	; 0x830 <Os_scheduler+0x68>
 804:	29 81       	ldd	r18, Y+1	; 0x01
 806:	3a 81       	ldd	r19, Y+2	; 0x02
 808:	28 32       	cpi	r18, 0x28	; 40
 80a:	31 05       	cpc	r19, r1
 80c:	b1 f0       	breq	.+44     	; 0x83a <Os_scheduler+0x72>
 80e:	e1 cf       	rjmp	.-62     	; 0x7d2 <Os_scheduler+0xa>
 810:	89 81       	ldd	r24, Y+1	; 0x01
 812:	9a 81       	ldd	r25, Y+2	; 0x02
 814:	84 36       	cpi	r24, 0x64	; 100
 816:	91 05       	cpc	r25, r1
 818:	59 f0       	breq	.+22     	; 0x830 <Os_scheduler+0x68>
 81a:	29 81       	ldd	r18, Y+1	; 0x01
 81c:	3a 81       	ldd	r19, Y+2	; 0x02
 81e:	28 37       	cpi	r18, 0x78	; 120
 820:	31 05       	cpc	r19, r1
 822:	c9 f0       	breq	.+50     	; 0x856 <Os_scheduler+0x8e>
 824:	89 81       	ldd	r24, Y+1	; 0x01
 826:	9a 81       	ldd	r25, Y+2	; 0x02
 828:	80 35       	cpi	r24, 0x50	; 80
 82a:	91 05       	cpc	r25, r1
 82c:	31 f0       	breq	.+12     	; 0x83a <Os_scheduler+0x72>
 82e:	d1 cf       	rjmp	.-94     	; 0x7d2 <Os_scheduler+0xa>
			{
				case 20:
				case 100:
					Button_Task();
 830:	0e 94 5b 00 	call	0xb6	; 0xb6 <Button_Task>
					g_New_Time_Tick_Flag = 0;
 834:	10 92 6f 00 	sts	0x006F, r1
 838:	cc cf       	rjmp	.-104    	; 0x7d2 <Os_scheduler+0xa>
					break;
				case 40:
				case 80:
					Button_Task();
 83a:	0e 94 5b 00 	call	0xb6	; 0xb6 <Button_Task>
					Led_Task();
 83e:	0e 94 64 00 	call	0xc8	; 0xc8 <Led_Task>
					g_New_Time_Tick_Flag = 0;
 842:	10 92 6f 00 	sts	0x006F, r1
 846:	c5 cf       	rjmp	.-118    	; 0x7d2 <Os_scheduler+0xa>
					break;
				case 60:
					Button_Task();
 848:	0e 94 5b 00 	call	0xb6	; 0xb6 <Button_Task>
					App_Task();
 84c:	0e 94 6d 00 	call	0xda	; 0xda <App_Task>
					g_New_Time_Tick_Flag = 0;
 850:	10 92 6f 00 	sts	0x006F, r1
 854:	be cf       	rjmp	.-132    	; 0x7d2 <Os_scheduler+0xa>
					break;
				case 120:
					Button_Task();
 856:	0e 94 5b 00 	call	0xb6	; 0xb6 <Button_Task>
					App_Task();
 85a:	0e 94 6d 00 	call	0xda	; 0xda <App_Task>
					Led_Task();
 85e:	0e 94 64 00 	call	0xc8	; 0xc8 <Led_Task>
					g_New_Time_Tick_Flag = 0;
 862:	10 92 6f 00 	sts	0x006F, r1
					g_Time_Tick_Count = 0;
 866:	10 92 6e 00 	sts	0x006E, r1
 86a:	b3 cf       	rjmp	.-154    	; 0x7d2 <Os_scheduler+0xa>

0000086c <Port_Init>:
#include "Dio_Regs.h"

STATIC Port_ConfigPins * PortConf = NULL_PTR;
STATIC uint8 Port_Status = PORT_NOT_INITIALIZED;

void Port_Init(const Port_ConfigType* ConfigPtr) {
 86c:	df 93       	push	r29
 86e:	cf 93       	push	r28
 870:	cd b7       	in	r28, 0x3d	; 61
 872:	de b7       	in	r29, 0x3e	; 62
 874:	2b 97       	sbiw	r28, 0x0b	; 11
 876:	0f b6       	in	r0, 0x3f	; 63
 878:	f8 94       	cli
 87a:	de bf       	out	0x3e, r29	; 62
 87c:	0f be       	out	0x3f, r0	; 63
 87e:	cd bf       	out	0x3d, r28	; 61
 880:	9f 83       	std	Y+7, r25	; 0x07
 882:	8e 83       	std	Y+6, r24	; 0x06
#if (PORT_DEV_ERROR_DETECT == STD_ON)
	if (ConfigPtr == NULL_PTR) {
 884:	8e 81       	ldd	r24, Y+6	; 0x06
 886:	9f 81       	ldd	r25, Y+7	; 0x07
 888:	00 97       	sbiw	r24, 0x00	; 0
 88a:	59 f4       	brne	.+22     	; 0x8a2 <Port_Init+0x36>
		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID, PORT_INIT_SID,
 88c:	88 e7       	ldi	r24, 0x78	; 120
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	60 e0       	ldi	r22, 0x00	; 0
 892:	70 e0       	ldi	r23, 0x00	; 0
 894:	40 e0       	ldi	r20, 0x00	; 0
 896:	50 e0       	ldi	r21, 0x00	; 0
 898:	2c e0       	ldi	r18, 0x0C	; 12
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	0e 94 c4 00 	call	0x188	; 0x188 <Det_ReportError>
 8a0:	3b c1       	rjmp	.+630    	; 0xb18 <Port_Init+0x2ac>
		PORT_E_PARAM_CONFIG);
	} else
#endif
	{
		PortConf = ConfigPtr->Pins;
 8a2:	8e 81       	ldd	r24, Y+6	; 0x06
 8a4:	9f 81       	ldd	r25, Y+7	; 0x07
 8a6:	90 93 71 00 	sts	0x0071, r25
 8aa:	80 93 70 00 	sts	0x0070, r24
		Port_Status = PORT_INITIALIZED;
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	80 93 72 00 	sts	0x0072, r24

		uint8 * DDR_PTR;
		uint8 * PORT_PTR;
		uint8 Pin_Index;
		for (Pin_Index = 0; Pin_Index < PORT_CONFIGURED_PINS; Pin_Index++) {
 8b4:	19 82       	std	Y+1, r1	; 0x01
 8b6:	2c c1       	rjmp	.+600    	; 0xb10 <Port_Init+0x2a4>
			switch (PortConf[Pin_Index].port) {
 8b8:	20 91 70 00 	lds	r18, 0x0070
 8bc:	30 91 71 00 	lds	r19, 0x0071
 8c0:	89 81       	ldd	r24, Y+1	; 0x01
 8c2:	88 2f       	mov	r24, r24
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	88 0f       	add	r24, r24
 8c8:	99 1f       	adc	r25, r25
 8ca:	88 0f       	add	r24, r24
 8cc:	99 1f       	adc	r25, r25
 8ce:	f9 01       	movw	r30, r18
 8d0:	e8 0f       	add	r30, r24
 8d2:	f9 1f       	adc	r31, r25
 8d4:	80 81       	ld	r24, Z
 8d6:	28 2f       	mov	r18, r24
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	3b 87       	std	Y+11, r19	; 0x0b
 8dc:	2a 87       	std	Y+10, r18	; 0x0a
 8de:	8a 85       	ldd	r24, Y+10	; 0x0a
 8e0:	9b 85       	ldd	r25, Y+11	; 0x0b
 8e2:	81 30       	cpi	r24, 0x01	; 1
 8e4:	91 05       	cpc	r25, r1
 8e6:	d1 f0       	breq	.+52     	; 0x91c <Port_Init+0xb0>
 8e8:	2a 85       	ldd	r18, Y+10	; 0x0a
 8ea:	3b 85       	ldd	r19, Y+11	; 0x0b
 8ec:	22 30       	cpi	r18, 0x02	; 2
 8ee:	31 05       	cpc	r19, r1
 8f0:	2c f4       	brge	.+10     	; 0x8fc <Port_Init+0x90>
 8f2:	8a 85       	ldd	r24, Y+10	; 0x0a
 8f4:	9b 85       	ldd	r25, Y+11	; 0x0b
 8f6:	00 97       	sbiw	r24, 0x00	; 0
 8f8:	61 f0       	breq	.+24     	; 0x912 <Port_Init+0xa6>
 8fa:	1e c0       	rjmp	.+60     	; 0x938 <Port_Init+0xcc>
 8fc:	2a 85       	ldd	r18, Y+10	; 0x0a
 8fe:	3b 85       	ldd	r19, Y+11	; 0x0b
 900:	22 30       	cpi	r18, 0x02	; 2
 902:	31 05       	cpc	r19, r1
 904:	81 f0       	breq	.+32     	; 0x926 <Port_Init+0xba>
 906:	8a 85       	ldd	r24, Y+10	; 0x0a
 908:	9b 85       	ldd	r25, Y+11	; 0x0b
 90a:	83 30       	cpi	r24, 0x03	; 3
 90c:	91 05       	cpc	r25, r1
 90e:	81 f0       	breq	.+32     	; 0x930 <Port_Init+0xc4>
 910:	13 c0       	rjmp	.+38     	; 0x938 <Port_Init+0xcc>
			case 0:
				PORT_PTR = &PORTA_REG;
 912:	8b e3       	ldi	r24, 0x3B	; 59
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	9b 83       	std	Y+3, r25	; 0x03
 918:	8a 83       	std	Y+2, r24	; 0x02
 91a:	0e c0       	rjmp	.+28     	; 0x938 <Port_Init+0xcc>
				break;
			case 1:
				PORT_PTR = &PORTB_REG;
 91c:	88 e3       	ldi	r24, 0x38	; 56
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	9b 83       	std	Y+3, r25	; 0x03
 922:	8a 83       	std	Y+2, r24	; 0x02
 924:	09 c0       	rjmp	.+18     	; 0x938 <Port_Init+0xcc>
				break;
			case 2:
				PORT_PTR = &PORTC_REG;
 926:	85 e3       	ldi	r24, 0x35	; 53
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	9b 83       	std	Y+3, r25	; 0x03
 92c:	8a 83       	std	Y+2, r24	; 0x02
 92e:	04 c0       	rjmp	.+8      	; 0x938 <Port_Init+0xcc>
				break;
			case 3:
				PORT_PTR = &PORTD_REG;
 930:	82 e3       	ldi	r24, 0x32	; 50
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	9b 83       	std	Y+3, r25	; 0x03
 936:	8a 83       	std	Y+2, r24	; 0x02
				break;
			}
			switch (PortConf[Pin_Index].port) {
 938:	20 91 70 00 	lds	r18, 0x0070
 93c:	30 91 71 00 	lds	r19, 0x0071
 940:	89 81       	ldd	r24, Y+1	; 0x01
 942:	88 2f       	mov	r24, r24
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	88 0f       	add	r24, r24
 948:	99 1f       	adc	r25, r25
 94a:	88 0f       	add	r24, r24
 94c:	99 1f       	adc	r25, r25
 94e:	f9 01       	movw	r30, r18
 950:	e8 0f       	add	r30, r24
 952:	f9 1f       	adc	r31, r25
 954:	80 81       	ld	r24, Z
 956:	28 2f       	mov	r18, r24
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	39 87       	std	Y+9, r19	; 0x09
 95c:	28 87       	std	Y+8, r18	; 0x08
 95e:	88 85       	ldd	r24, Y+8	; 0x08
 960:	99 85       	ldd	r25, Y+9	; 0x09
 962:	81 30       	cpi	r24, 0x01	; 1
 964:	91 05       	cpc	r25, r1
 966:	d1 f0       	breq	.+52     	; 0x99c <Port_Init+0x130>
 968:	28 85       	ldd	r18, Y+8	; 0x08
 96a:	39 85       	ldd	r19, Y+9	; 0x09
 96c:	22 30       	cpi	r18, 0x02	; 2
 96e:	31 05       	cpc	r19, r1
 970:	2c f4       	brge	.+10     	; 0x97c <Port_Init+0x110>
 972:	88 85       	ldd	r24, Y+8	; 0x08
 974:	99 85       	ldd	r25, Y+9	; 0x09
 976:	00 97       	sbiw	r24, 0x00	; 0
 978:	61 f0       	breq	.+24     	; 0x992 <Port_Init+0x126>
 97a:	1e c0       	rjmp	.+60     	; 0x9b8 <Port_Init+0x14c>
 97c:	28 85       	ldd	r18, Y+8	; 0x08
 97e:	39 85       	ldd	r19, Y+9	; 0x09
 980:	22 30       	cpi	r18, 0x02	; 2
 982:	31 05       	cpc	r19, r1
 984:	81 f0       	breq	.+32     	; 0x9a6 <Port_Init+0x13a>
 986:	88 85       	ldd	r24, Y+8	; 0x08
 988:	99 85       	ldd	r25, Y+9	; 0x09
 98a:	83 30       	cpi	r24, 0x03	; 3
 98c:	91 05       	cpc	r25, r1
 98e:	81 f0       	breq	.+32     	; 0x9b0 <Port_Init+0x144>
 990:	13 c0       	rjmp	.+38     	; 0x9b8 <Port_Init+0x14c>
			case 0:
				DDR_PTR = &DDRA_REG;
 992:	8a e3       	ldi	r24, 0x3A	; 58
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	9d 83       	std	Y+5, r25	; 0x05
 998:	8c 83       	std	Y+4, r24	; 0x04
 99a:	0e c0       	rjmp	.+28     	; 0x9b8 <Port_Init+0x14c>
				break;
			case 1:
				DDR_PTR = &DDRB_REG;
 99c:	87 e3       	ldi	r24, 0x37	; 55
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	9d 83       	std	Y+5, r25	; 0x05
 9a2:	8c 83       	std	Y+4, r24	; 0x04
 9a4:	09 c0       	rjmp	.+18     	; 0x9b8 <Port_Init+0x14c>
				break;
			case 2:
				DDR_PTR = &DDRC_REG;
 9a6:	84 e3       	ldi	r24, 0x34	; 52
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	9d 83       	std	Y+5, r25	; 0x05
 9ac:	8c 83       	std	Y+4, r24	; 0x04
 9ae:	04 c0       	rjmp	.+8      	; 0x9b8 <Port_Init+0x14c>
				break;
			case 3:
				DDR_PTR = &DDRD_REG;
 9b0:	81 e3       	ldi	r24, 0x31	; 49
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	9d 83       	std	Y+5, r25	; 0x05
 9b6:	8c 83       	std	Y+4, r24	; 0x04
				break;
			}

			if (PortConf[Pin_Index].level == PORT_PIN_LEVEL_HIGH) {
 9b8:	20 91 70 00 	lds	r18, 0x0070
 9bc:	30 91 71 00 	lds	r19, 0x0071
 9c0:	89 81       	ldd	r24, Y+1	; 0x01
 9c2:	88 2f       	mov	r24, r24
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	88 0f       	add	r24, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	88 0f       	add	r24, r24
 9cc:	99 1f       	adc	r25, r25
 9ce:	f9 01       	movw	r30, r18
 9d0:	e8 0f       	add	r30, r24
 9d2:	f9 1f       	adc	r31, r25
 9d4:	83 81       	ldd	r24, Z+3	; 0x03
 9d6:	81 30       	cpi	r24, 0x01	; 1
 9d8:	11 f5       	brne	.+68     	; 0xa1e <Port_Init+0x1b2>
				SET_BIT(*PORT_PTR, PortConf[Pin_Index].pin_num);
 9da:	ea 81       	ldd	r30, Y+2	; 0x02
 9dc:	fb 81       	ldd	r31, Y+3	; 0x03
 9de:	80 81       	ld	r24, Z
 9e0:	48 2f       	mov	r20, r24
 9e2:	20 91 70 00 	lds	r18, 0x0070
 9e6:	30 91 71 00 	lds	r19, 0x0071
 9ea:	89 81       	ldd	r24, Y+1	; 0x01
 9ec:	88 2f       	mov	r24, r24
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	88 0f       	add	r24, r24
 9f2:	99 1f       	adc	r25, r25
 9f4:	88 0f       	add	r24, r24
 9f6:	99 1f       	adc	r25, r25
 9f8:	f9 01       	movw	r30, r18
 9fa:	e8 0f       	add	r30, r24
 9fc:	f9 1f       	adc	r31, r25
 9fe:	81 81       	ldd	r24, Z+1	; 0x01
 a00:	28 2f       	mov	r18, r24
 a02:	30 e0       	ldi	r19, 0x00	; 0
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	02 2e       	mov	r0, r18
 a0a:	02 c0       	rjmp	.+4      	; 0xa10 <Port_Init+0x1a4>
 a0c:	88 0f       	add	r24, r24
 a0e:	99 1f       	adc	r25, r25
 a10:	0a 94       	dec	r0
 a12:	e2 f7       	brpl	.-8      	; 0xa0c <Port_Init+0x1a0>
 a14:	84 2b       	or	r24, r20
 a16:	ea 81       	ldd	r30, Y+2	; 0x02
 a18:	fb 81       	ldd	r31, Y+3	; 0x03
 a1a:	80 83       	st	Z, r24
 a1c:	21 c0       	rjmp	.+66     	; 0xa60 <Port_Init+0x1f4>
			} else {
				CLEAR_BIT(*PORT_PTR, PortConf[Pin_Index].pin_num);
 a1e:	ea 81       	ldd	r30, Y+2	; 0x02
 a20:	fb 81       	ldd	r31, Y+3	; 0x03
 a22:	80 81       	ld	r24, Z
 a24:	48 2f       	mov	r20, r24
 a26:	20 91 70 00 	lds	r18, 0x0070
 a2a:	30 91 71 00 	lds	r19, 0x0071
 a2e:	89 81       	ldd	r24, Y+1	; 0x01
 a30:	88 2f       	mov	r24, r24
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	88 0f       	add	r24, r24
 a36:	99 1f       	adc	r25, r25
 a38:	88 0f       	add	r24, r24
 a3a:	99 1f       	adc	r25, r25
 a3c:	f9 01       	movw	r30, r18
 a3e:	e8 0f       	add	r30, r24
 a40:	f9 1f       	adc	r31, r25
 a42:	81 81       	ldd	r24, Z+1	; 0x01
 a44:	28 2f       	mov	r18, r24
 a46:	30 e0       	ldi	r19, 0x00	; 0
 a48:	81 e0       	ldi	r24, 0x01	; 1
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	02 c0       	rjmp	.+4      	; 0xa52 <Port_Init+0x1e6>
 a4e:	88 0f       	add	r24, r24
 a50:	99 1f       	adc	r25, r25
 a52:	2a 95       	dec	r18
 a54:	e2 f7       	brpl	.-8      	; 0xa4e <Port_Init+0x1e2>
 a56:	80 95       	com	r24
 a58:	84 23       	and	r24, r20
 a5a:	ea 81       	ldd	r30, Y+2	; 0x02
 a5c:	fb 81       	ldd	r31, Y+3	; 0x03
 a5e:	80 83       	st	Z, r24
			}

			if (PortConf[Pin_Index].direction == PORT_PIN_LEVEL_HIGH) {
 a60:	20 91 70 00 	lds	r18, 0x0070
 a64:	30 91 71 00 	lds	r19, 0x0071
 a68:	89 81       	ldd	r24, Y+1	; 0x01
 a6a:	88 2f       	mov	r24, r24
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	88 0f       	add	r24, r24
 a70:	99 1f       	adc	r25, r25
 a72:	88 0f       	add	r24, r24
 a74:	99 1f       	adc	r25, r25
 a76:	f9 01       	movw	r30, r18
 a78:	e8 0f       	add	r30, r24
 a7a:	f9 1f       	adc	r31, r25
 a7c:	82 81       	ldd	r24, Z+2	; 0x02
 a7e:	81 30       	cpi	r24, 0x01	; 1
 a80:	11 f5       	brne	.+68     	; 0xac6 <Port_Init+0x25a>
				SET_BIT(*DDR_PTR, PortConf[Pin_Index].pin_num);
 a82:	ec 81       	ldd	r30, Y+4	; 0x04
 a84:	fd 81       	ldd	r31, Y+5	; 0x05
 a86:	80 81       	ld	r24, Z
 a88:	48 2f       	mov	r20, r24
 a8a:	20 91 70 00 	lds	r18, 0x0070
 a8e:	30 91 71 00 	lds	r19, 0x0071
 a92:	89 81       	ldd	r24, Y+1	; 0x01
 a94:	88 2f       	mov	r24, r24
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	88 0f       	add	r24, r24
 a9a:	99 1f       	adc	r25, r25
 a9c:	88 0f       	add	r24, r24
 a9e:	99 1f       	adc	r25, r25
 aa0:	f9 01       	movw	r30, r18
 aa2:	e8 0f       	add	r30, r24
 aa4:	f9 1f       	adc	r31, r25
 aa6:	81 81       	ldd	r24, Z+1	; 0x01
 aa8:	28 2f       	mov	r18, r24
 aaa:	30 e0       	ldi	r19, 0x00	; 0
 aac:	81 e0       	ldi	r24, 0x01	; 1
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	02 2e       	mov	r0, r18
 ab2:	02 c0       	rjmp	.+4      	; 0xab8 <Port_Init+0x24c>
 ab4:	88 0f       	add	r24, r24
 ab6:	99 1f       	adc	r25, r25
 ab8:	0a 94       	dec	r0
 aba:	e2 f7       	brpl	.-8      	; 0xab4 <Port_Init+0x248>
 abc:	84 2b       	or	r24, r20
 abe:	ec 81       	ldd	r30, Y+4	; 0x04
 ac0:	fd 81       	ldd	r31, Y+5	; 0x05
 ac2:	80 83       	st	Z, r24
 ac4:	22 c0       	rjmp	.+68     	; 0xb0a <Port_Init+0x29e>
			} else {
				CLEAR_BIT(*DDR_PTR, PortConf[Pin_Index].pin_num);
 ac6:	ec 81       	ldd	r30, Y+4	; 0x04
 ac8:	fd 81       	ldd	r31, Y+5	; 0x05
 aca:	80 81       	ld	r24, Z
 acc:	48 2f       	mov	r20, r24
 ace:	20 91 70 00 	lds	r18, 0x0070
 ad2:	30 91 71 00 	lds	r19, 0x0071
 ad6:	89 81       	ldd	r24, Y+1	; 0x01
 ad8:	88 2f       	mov	r24, r24
 ada:	90 e0       	ldi	r25, 0x00	; 0
 adc:	88 0f       	add	r24, r24
 ade:	99 1f       	adc	r25, r25
 ae0:	88 0f       	add	r24, r24
 ae2:	99 1f       	adc	r25, r25
 ae4:	f9 01       	movw	r30, r18
 ae6:	e8 0f       	add	r30, r24
 ae8:	f9 1f       	adc	r31, r25
 aea:	81 81       	ldd	r24, Z+1	; 0x01
 aec:	28 2f       	mov	r18, r24
 aee:	30 e0       	ldi	r19, 0x00	; 0
 af0:	81 e0       	ldi	r24, 0x01	; 1
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	02 2e       	mov	r0, r18
 af6:	02 c0       	rjmp	.+4      	; 0xafc <Port_Init+0x290>
 af8:	88 0f       	add	r24, r24
 afa:	99 1f       	adc	r25, r25
 afc:	0a 94       	dec	r0
 afe:	e2 f7       	brpl	.-8      	; 0xaf8 <Port_Init+0x28c>
 b00:	80 95       	com	r24
 b02:	84 23       	and	r24, r20
 b04:	ec 81       	ldd	r30, Y+4	; 0x04
 b06:	fd 81       	ldd	r31, Y+5	; 0x05
 b08:	80 83       	st	Z, r24
		Port_Status = PORT_INITIALIZED;

		uint8 * DDR_PTR;
		uint8 * PORT_PTR;
		uint8 Pin_Index;
		for (Pin_Index = 0; Pin_Index < PORT_CONFIGURED_PINS; Pin_Index++) {
 b0a:	89 81       	ldd	r24, Y+1	; 0x01
 b0c:	8f 5f       	subi	r24, 0xFF	; 255
 b0e:	89 83       	std	Y+1, r24	; 0x01
 b10:	89 81       	ldd	r24, Y+1	; 0x01
 b12:	80 32       	cpi	r24, 0x20	; 32
 b14:	08 f4       	brcc	.+2      	; 0xb18 <Port_Init+0x2ac>
 b16:	d0 ce       	rjmp	.-608    	; 0x8b8 <Port_Init+0x4c>
				CLEAR_BIT(*DDR_PTR, PortConf[Pin_Index].pin_num);
			}

		}
	}
}
 b18:	2b 96       	adiw	r28, 0x0b	; 11
 b1a:	0f b6       	in	r0, 0x3f	; 63
 b1c:	f8 94       	cli
 b1e:	de bf       	out	0x3e, r29	; 62
 b20:	0f be       	out	0x3f, r0	; 63
 b22:	cd bf       	out	0x3d, r28	; 61
 b24:	cf 91       	pop	r28
 b26:	df 91       	pop	r29
 b28:	08 95       	ret

00000b2a <Port_SetPinDirection>:

void Port_SetPinDirection(Port_PinType Pin, Port_PinDirectionType Direction)
{
 b2a:	df 93       	push	r29
 b2c:	cf 93       	push	r28
 b2e:	00 d0       	rcall	.+0      	; 0xb30 <Port_SetPinDirection+0x6>
 b30:	00 d0       	rcall	.+0      	; 0xb32 <Port_SetPinDirection+0x8>
 b32:	00 d0       	rcall	.+0      	; 0xb34 <Port_SetPinDirection+0xa>
 b34:	cd b7       	in	r28, 0x3d	; 61
 b36:	de b7       	in	r29, 0x3e	; 62
 b38:	8b 83       	std	Y+3, r24	; 0x03
 b3a:	6c 83       	std	Y+4, r22	; 0x04
#if (PORT_DEV_ERROR_DETECT == STD_ON)
	if (Port_Status == PORT_NOT_INITIALIZED)
 b3c:	80 91 72 00 	lds	r24, 0x0072
 b40:	88 23       	and	r24, r24
 b42:	51 f4       	brne	.+20     	; 0xb58 <Port_SetPinDirection+0x2e>
	{
		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID, PORT_INIT_SID,
 b44:	88 e7       	ldi	r24, 0x78	; 120
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	60 e0       	ldi	r22, 0x00	; 0
 b4a:	70 e0       	ldi	r23, 0x00	; 0
 b4c:	40 e0       	ldi	r20, 0x00	; 0
 b4e:	50 e0       	ldi	r21, 0x00	; 0
 b50:	20 ef       	ldi	r18, 0xF0	; 240
 b52:	30 e0       	ldi	r19, 0x00	; 0
 b54:	0e 94 c4 00 	call	0x188	; 0x188 <Det_ReportError>
	}
	else
	{

	}
	if (Pin >= PORT_CONFIGURED_PINS)
 b58:	8b 81       	ldd	r24, Y+3	; 0x03
 b5a:	80 32       	cpi	r24, 0x20	; 32
 b5c:	50 f0       	brcs	.+20     	; 0xb72 <Port_SetPinDirection+0x48>
	{
		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID, PORT_INIT_SID,
 b5e:	88 e7       	ldi	r24, 0x78	; 120
 b60:	90 e0       	ldi	r25, 0x00	; 0
 b62:	60 e0       	ldi	r22, 0x00	; 0
 b64:	70 e0       	ldi	r23, 0x00	; 0
 b66:	40 e0       	ldi	r20, 0x00	; 0
 b68:	50 e0       	ldi	r21, 0x00	; 0
 b6a:	2a e0       	ldi	r18, 0x0A	; 10
 b6c:	30 e0       	ldi	r19, 0x00	; 0
 b6e:	0e 94 c4 00 	call	0x188	; 0x188 <Det_ReportError>
	{

	}
#endif

	Port_Status = PORT_INITIALIZED;
 b72:	81 e0       	ldi	r24, 0x01	; 1
 b74:	80 93 72 00 	sts	0x0072, r24
	uint8 * DDR_PTR;
	switch (PortConf[Pin].port) {
 b78:	20 91 70 00 	lds	r18, 0x0070
 b7c:	30 91 71 00 	lds	r19, 0x0071
 b80:	8b 81       	ldd	r24, Y+3	; 0x03
 b82:	88 2f       	mov	r24, r24
 b84:	90 e0       	ldi	r25, 0x00	; 0
 b86:	88 0f       	add	r24, r24
 b88:	99 1f       	adc	r25, r25
 b8a:	88 0f       	add	r24, r24
 b8c:	99 1f       	adc	r25, r25
 b8e:	f9 01       	movw	r30, r18
 b90:	e8 0f       	add	r30, r24
 b92:	f9 1f       	adc	r31, r25
 b94:	80 81       	ld	r24, Z
 b96:	28 2f       	mov	r18, r24
 b98:	30 e0       	ldi	r19, 0x00	; 0
 b9a:	3e 83       	std	Y+6, r19	; 0x06
 b9c:	2d 83       	std	Y+5, r18	; 0x05
 b9e:	8d 81       	ldd	r24, Y+5	; 0x05
 ba0:	9e 81       	ldd	r25, Y+6	; 0x06
 ba2:	81 30       	cpi	r24, 0x01	; 1
 ba4:	91 05       	cpc	r25, r1
 ba6:	d1 f0       	breq	.+52     	; 0xbdc <Port_SetPinDirection+0xb2>
 ba8:	2d 81       	ldd	r18, Y+5	; 0x05
 baa:	3e 81       	ldd	r19, Y+6	; 0x06
 bac:	22 30       	cpi	r18, 0x02	; 2
 bae:	31 05       	cpc	r19, r1
 bb0:	2c f4       	brge	.+10     	; 0xbbc <Port_SetPinDirection+0x92>
 bb2:	8d 81       	ldd	r24, Y+5	; 0x05
 bb4:	9e 81       	ldd	r25, Y+6	; 0x06
 bb6:	00 97       	sbiw	r24, 0x00	; 0
 bb8:	61 f0       	breq	.+24     	; 0xbd2 <Port_SetPinDirection+0xa8>
 bba:	1e c0       	rjmp	.+60     	; 0xbf8 <Port_SetPinDirection+0xce>
 bbc:	2d 81       	ldd	r18, Y+5	; 0x05
 bbe:	3e 81       	ldd	r19, Y+6	; 0x06
 bc0:	22 30       	cpi	r18, 0x02	; 2
 bc2:	31 05       	cpc	r19, r1
 bc4:	81 f0       	breq	.+32     	; 0xbe6 <Port_SetPinDirection+0xbc>
 bc6:	8d 81       	ldd	r24, Y+5	; 0x05
 bc8:	9e 81       	ldd	r25, Y+6	; 0x06
 bca:	83 30       	cpi	r24, 0x03	; 3
 bcc:	91 05       	cpc	r25, r1
 bce:	81 f0       	breq	.+32     	; 0xbf0 <Port_SetPinDirection+0xc6>
 bd0:	13 c0       	rjmp	.+38     	; 0xbf8 <Port_SetPinDirection+0xce>
	case 0:
		DDR_PTR = &DDRA_REG;
 bd2:	8a e3       	ldi	r24, 0x3A	; 58
 bd4:	90 e0       	ldi	r25, 0x00	; 0
 bd6:	9a 83       	std	Y+2, r25	; 0x02
 bd8:	89 83       	std	Y+1, r24	; 0x01
 bda:	0e c0       	rjmp	.+28     	; 0xbf8 <Port_SetPinDirection+0xce>
		break;
	case 1:
		DDR_PTR = &DDRB_REG;
 bdc:	87 e3       	ldi	r24, 0x37	; 55
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	9a 83       	std	Y+2, r25	; 0x02
 be2:	89 83       	std	Y+1, r24	; 0x01
 be4:	09 c0       	rjmp	.+18     	; 0xbf8 <Port_SetPinDirection+0xce>
		break;
	case 2:
		DDR_PTR = &DDRC_REG;
 be6:	84 e3       	ldi	r24, 0x34	; 52
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	9a 83       	std	Y+2, r25	; 0x02
 bec:	89 83       	std	Y+1, r24	; 0x01
 bee:	04 c0       	rjmp	.+8      	; 0xbf8 <Port_SetPinDirection+0xce>
		break;
	case 3:
		DDR_PTR = &DDRD_REG;
 bf0:	81 e3       	ldi	r24, 0x31	; 49
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	9a 83       	std	Y+2, r25	; 0x02
 bf6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	if (Direction == PORT_PIN_OUT)
 bf8:	8c 81       	ldd	r24, Y+4	; 0x04
 bfa:	81 30       	cpi	r24, 0x01	; 1
 bfc:	11 f5       	brne	.+68     	; 0xc42 <Port_SetPinDirection+0x118>
	{
		SET_BIT(*DDR_PTR, PortConf[Pin].pin_num);
 bfe:	e9 81       	ldd	r30, Y+1	; 0x01
 c00:	fa 81       	ldd	r31, Y+2	; 0x02
 c02:	80 81       	ld	r24, Z
 c04:	48 2f       	mov	r20, r24
 c06:	20 91 70 00 	lds	r18, 0x0070
 c0a:	30 91 71 00 	lds	r19, 0x0071
 c0e:	8b 81       	ldd	r24, Y+3	; 0x03
 c10:	88 2f       	mov	r24, r24
 c12:	90 e0       	ldi	r25, 0x00	; 0
 c14:	88 0f       	add	r24, r24
 c16:	99 1f       	adc	r25, r25
 c18:	88 0f       	add	r24, r24
 c1a:	99 1f       	adc	r25, r25
 c1c:	f9 01       	movw	r30, r18
 c1e:	e8 0f       	add	r30, r24
 c20:	f9 1f       	adc	r31, r25
 c22:	81 81       	ldd	r24, Z+1	; 0x01
 c24:	28 2f       	mov	r18, r24
 c26:	30 e0       	ldi	r19, 0x00	; 0
 c28:	81 e0       	ldi	r24, 0x01	; 1
 c2a:	90 e0       	ldi	r25, 0x00	; 0
 c2c:	02 2e       	mov	r0, r18
 c2e:	02 c0       	rjmp	.+4      	; 0xc34 <Port_SetPinDirection+0x10a>
 c30:	88 0f       	add	r24, r24
 c32:	99 1f       	adc	r25, r25
 c34:	0a 94       	dec	r0
 c36:	e2 f7       	brpl	.-8      	; 0xc30 <Port_SetPinDirection+0x106>
 c38:	84 2b       	or	r24, r20
 c3a:	e9 81       	ldd	r30, Y+1	; 0x01
 c3c:	fa 81       	ldd	r31, Y+2	; 0x02
 c3e:	80 83       	st	Z, r24
 c40:	25 c0       	rjmp	.+74     	; 0xc8c <Port_SetPinDirection+0x162>
	}
	else if(Direction == PORT_PIN_IN)
 c42:	8c 81       	ldd	r24, Y+4	; 0x04
 c44:	88 23       	and	r24, r24
 c46:	11 f5       	brne	.+68     	; 0xc8c <Port_SetPinDirection+0x162>
	{
		CLEAR_BIT(*DDR_PTR, PortConf[Pin].pin_num);
 c48:	e9 81       	ldd	r30, Y+1	; 0x01
 c4a:	fa 81       	ldd	r31, Y+2	; 0x02
 c4c:	80 81       	ld	r24, Z
 c4e:	48 2f       	mov	r20, r24
 c50:	20 91 70 00 	lds	r18, 0x0070
 c54:	30 91 71 00 	lds	r19, 0x0071
 c58:	8b 81       	ldd	r24, Y+3	; 0x03
 c5a:	88 2f       	mov	r24, r24
 c5c:	90 e0       	ldi	r25, 0x00	; 0
 c5e:	88 0f       	add	r24, r24
 c60:	99 1f       	adc	r25, r25
 c62:	88 0f       	add	r24, r24
 c64:	99 1f       	adc	r25, r25
 c66:	f9 01       	movw	r30, r18
 c68:	e8 0f       	add	r30, r24
 c6a:	f9 1f       	adc	r31, r25
 c6c:	81 81       	ldd	r24, Z+1	; 0x01
 c6e:	28 2f       	mov	r18, r24
 c70:	30 e0       	ldi	r19, 0x00	; 0
 c72:	81 e0       	ldi	r24, 0x01	; 1
 c74:	90 e0       	ldi	r25, 0x00	; 0
 c76:	02 2e       	mov	r0, r18
 c78:	02 c0       	rjmp	.+4      	; 0xc7e <Port_SetPinDirection+0x154>
 c7a:	88 0f       	add	r24, r24
 c7c:	99 1f       	adc	r25, r25
 c7e:	0a 94       	dec	r0
 c80:	e2 f7       	brpl	.-8      	; 0xc7a <Port_SetPinDirection+0x150>
 c82:	80 95       	com	r24
 c84:	84 23       	and	r24, r20
 c86:	e9 81       	ldd	r30, Y+1	; 0x01
 c88:	fa 81       	ldd	r31, Y+2	; 0x02
 c8a:	80 83       	st	Z, r24
	}

}
 c8c:	26 96       	adiw	r28, 0x06	; 6
 c8e:	0f b6       	in	r0, 0x3f	; 63
 c90:	f8 94       	cli
 c92:	de bf       	out	0x3e, r29	; 62
 c94:	0f be       	out	0x3f, r0	; 63
 c96:	cd bf       	out	0x3d, r28	; 61
 c98:	cf 91       	pop	r28
 c9a:	df 91       	pop	r29
 c9c:	08 95       	ret

00000c9e <Port_GetVersionInfo>:

void Port_GetVersionInfo( Std_VersionInfoType* versioninfo )
{
 c9e:	df 93       	push	r29
 ca0:	cf 93       	push	r28
 ca2:	00 d0       	rcall	.+0      	; 0xca4 <Port_GetVersionInfo+0x6>
 ca4:	cd b7       	in	r28, 0x3d	; 61
 ca6:	de b7       	in	r29, 0x3e	; 62
 ca8:	9a 83       	std	Y+2, r25	; 0x02
 caa:	89 83       	std	Y+1, r24	; 0x01
#if(PORT_DEV_ERROR_DETECT == STD_ON)
	if(versioninfo == NULL_PTR)
 cac:	89 81       	ldd	r24, Y+1	; 0x01
 cae:	9a 81       	ldd	r25, Y+2	; 0x02
 cb0:	00 97       	sbiw	r24, 0x00	; 0
 cb2:	59 f4       	brne	.+22     	; 0xcca <Port_GetVersionInfo+0x2c>
	{
		Det_ReportError(PORT_MODULE_ID, PORT_INSTANCE_ID,
 cb4:	88 e7       	ldi	r24, 0x78	; 120
 cb6:	90 e0       	ldi	r25, 0x00	; 0
 cb8:	60 e0       	ldi	r22, 0x00	; 0
 cba:	70 e0       	ldi	r23, 0x00	; 0
 cbc:	43 e0       	ldi	r20, 0x03	; 3
 cbe:	50 e0       	ldi	r21, 0x00	; 0
 cc0:	20 e1       	ldi	r18, 0x10	; 16
 cc2:	30 e0       	ldi	r19, 0x00	; 0
 cc4:	0e 94 c4 00 	call	0x188	; 0x188 <Det_ReportError>
 cc8:	16 c0       	rjmp	.+44     	; 0xcf6 <Port_GetVersionInfo+0x58>
				Port_GET_VERSION_INFO_SID, PORT_E_PARAM_POINTER);
	}
	else
	{
#endif
	versioninfo ->vendorID = (uint16)PORT_VENDOR_ID;
 cca:	e9 81       	ldd	r30, Y+1	; 0x01
 ccc:	fa 81       	ldd	r31, Y+2	; 0x02
 cce:	88 ee       	ldi	r24, 0xE8	; 232
 cd0:	93 e0       	ldi	r25, 0x03	; 3
 cd2:	91 83       	std	Z+1, r25	; 0x01
 cd4:	80 83       	st	Z, r24
	versioninfo ->moduleID = (uint16)PORT_MODULE_ID;
 cd6:	e9 81       	ldd	r30, Y+1	; 0x01
 cd8:	fa 81       	ldd	r31, Y+2	; 0x02
 cda:	88 e7       	ldi	r24, 0x78	; 120
 cdc:	90 e0       	ldi	r25, 0x00	; 0
 cde:	93 83       	std	Z+3, r25	; 0x03
 ce0:	82 83       	std	Z+2, r24	; 0x02
	versioninfo ->sw_major_version = (uint8)PORT_SW_MAJOR_VERSION;
 ce2:	e9 81       	ldd	r30, Y+1	; 0x01
 ce4:	fa 81       	ldd	r31, Y+2	; 0x02
 ce6:	81 e0       	ldi	r24, 0x01	; 1
 ce8:	84 83       	std	Z+4, r24	; 0x04
	versioninfo ->sw_minor_version = (uint8)PORT_SW_MINOR_VERSION;
 cea:	e9 81       	ldd	r30, Y+1	; 0x01
 cec:	fa 81       	ldd	r31, Y+2	; 0x02
 cee:	15 82       	std	Z+5, r1	; 0x05
	versioninfo ->sw_patch_version = (uint8)PORT_SW_PATCH_VERSION;
 cf0:	e9 81       	ldd	r30, Y+1	; 0x01
 cf2:	fa 81       	ldd	r31, Y+2	; 0x02
 cf4:	16 82       	std	Z+6, r1	; 0x06
}
}
 cf6:	0f 90       	pop	r0
 cf8:	0f 90       	pop	r0
 cfa:	cf 91       	pop	r28
 cfc:	df 91       	pop	r29
 cfe:	08 95       	ret

00000d00 <main>:
#include "Os.h"

int main(void)
{
 d00:	df 93       	push	r29
 d02:	cf 93       	push	r28
 d04:	cd b7       	in	r28, 0x3d	; 61
 d06:	de b7       	in	r29, 0x3e	; 62
	/* Start the Os */
	Os_start();
 d08:	0e 94 c5 03 	call	0x78a	; 0x78a <Os_start>
 d0c:	80 e0       	ldi	r24, 0x00	; 0
 d0e:	90 e0       	ldi	r25, 0x00	; 0
}
 d10:	cf 91       	pop	r28
 d12:	df 91       	pop	r29
 d14:	08 95       	ret

00000d16 <_exit>:
 d16:	f8 94       	cli

00000d18 <__stop_program>:
 d18:	ff cf       	rjmp	.-2      	; 0xd18 <__stop_program>
